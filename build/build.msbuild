<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
      <RootDir>$(MSBuildStartupDirectory)</RootDir>
	  <CodeTaskFactoryDll Condition="'$(MSBuildToolsVersion)' != '14'">$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</CodeTaskFactoryDll>
	  <CodeTaskFactoryDll Condition="'$(MSBuildToolsVersion)' == '14'">$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</CodeTaskFactoryDll>
    </PropertyGroup>
	
	<!-- This works for msbuild 12 -->
    <UsingTask TaskName="DownloadNuGet" TaskFactory="CodeTaskFactory" AssemblyFile="$(CodeTaskFactoryDll)" >	
       <ParameterGroup>
           <OutputFilename ParameterType="System.String" Required="true" />
       </ParameterGroup>
       <Task>
           <Reference Include="System.Core" />
           <Using Namespace="System" />
           <Using Namespace="System.IO" />
           <Using Namespace="System.Net" />
           <Using Namespace="Microsoft.Build.Framework" />
           <Using Namespace="Microsoft.Build.Utilities" />
           <Code Type="Fragment" Language="cs">
               <![CDATA[
               try {
                   OutputFilename = Path.GetFullPath(OutputFilename);

                   Log.LogMessage("Downloading latest version of NuGet.exe...");
                   WebClient webClient = new WebClient();
                   webClient.DownloadFile("https://nuget.org/nuget.exe", OutputFilename);

                   return true;
               }
               catch (Exception ex) {
                   Log.LogErrorFromException(ex);
                   return false;
               }
           ]]>
           </Code>
       </Task>
    </UsingTask>

    <Target Name="RestorePackages">
        <ItemGroup>
            <NuGetSourcesList Include="$(NUGET_BUILD_FEEDS)" />
        </ItemGroup>
        <PropertyGroup>
            <NuGetExeDir>$(RootDir)\.nuget</NuGetExeDir>
            <NuGetExePath>$(NuGetExeDir)\nuget.exe</NuGetExePath>
            <NuGetExeSources>@(NuGetSourcesList -> '-source %(Identity)', ' ')</NuGetExeSources>
            <NuGetCommndLineCmdSources>@(NuGetSourcesList -> '-f %(Identity)', ' ')</NuGetCommndLineCmdSources>
        </PropertyGroup>

        <MakeDir Directories="$(NuGetExeDir)" Condition="!Exists('$(NuGetExeDir)')" />
        <Message Text="Restoring packages ... " Importance="high" />
        <DownloadNuGet OutputFilename="$(NuGetExePath)" Condition=" !Exists('$(NuGetExePath)')" />

        <!-- Restore NuGet.CommandLine.Cmd -->
        <Exec Command="$(NuGetExePath) install NuGet.CommandLine.Cmd -ExcludeVersion -Out $(RootDir)\packages -NoCache -pre $(NuGetExeSources)"
              Condition=" !Exists('$(RootDir)\packages\NuGet.CommandLine.cmd') " />

        <!-- Restore MsBuid script -->
        <Exec Command="$(NuGetExePath) install NuGet.MsBuild.Integration -ExcludeVersion -Out $(RootDir)\packages -NoCache -pre"
              Condition=" !Exists('$(RootDir)\packages\NuGet.MsBuild.Integration') " />

        <!-- Transitive restore requires project.lock.json to exist. We'll workaround this by listing the projects in a deterministic order -->
        <ItemGroup>
            <SrcProjectsToRestore Include="$(RootDir)\src\ProjectManagement\*.csproj" />
            <SrcProjectsToRestore Include="$(RootDir)\src\PackageManagement\*.csproj" />
            <SrcProjectsToRestore Include="$(RootDir)\src\PackageManagement.UI\*.csproj" />
            <SrcProjectsToRestore Include="$(RootDir)\src\NuGet.CommandLine\*.csproj" />

            <TestProjectsToRestore Include="$(RootDir)\test\Test.Utility\*.csproj" />
            <TestProjectsToRestore Include="$(RootDir)\test\ProjectManagement.Test\*.csproj" />
            <TestProjectsToRestore Include="$(RootDir)\test\PackageManagement.Test\*.csproj" />
            <TestProjectsToRestore Include="$(RootDir)\test\NuGet.CommandLine.Test\*.csproj" />
            <TestProjectsToRestore Include="$(RootDir)\test\StandaloneUI\*.csproj" />
        </ItemGroup>
        
        <Exec Command="$(RootDir)\packages\NuGet.CommandLine.Cmd\build\NuGet.CommandLine.cmd restore $(NuGetCommndLineCmdSources) %(SrcProjectsToRestore.FullPath)"  />
        <Exec Command="$(RootDir)\packages\NuGet.CommandLine.Cmd\build\NuGet.CommandLine.cmd restore $(NuGetCommndLineCmdSources) %(TestProjectsToRestore.FullPath)"  />
    </Target>

    <ItemGroup>
      <!-- tests -->
     <TestProjects Include="$(RootDir)\test\ProjectManagement.Test\ProjectManagement.Test.csproj" />
     <TestProjects Include="$(RootDir)\test\PackageManagement.Test\PackageManagement.Test.csproj" />
     <TestProjects Include="$(RootDir)\test\NuGet.CommandLine.Test\NuGet.CommandLine.Test.csproj" />
    </ItemGroup>

    <Target Name="RunTests" Condition=" '$(DisableRunningUnitTests)' != 'true' ">        
      <MsBuild Projects="@(TestProjects)" Targets="RunTests" BuildInParallel="$(BuildTestsInParallel)" />
    </Target>

    <Target Name="ReportFxCopResults">
      <ItemGroup>
        <FxCopOutputItems Include="$(RootDir)\**\*.dll.CodeAnalysisLog.xml" />
      </ItemGroup>
    </Target>

    <Target Name="Clean">
      <MSBuild Projects="$(RootDir)\PackageManagement.sln" Targets="Clean" />
    </Target>

    <ItemGroup>
      <SolutionFile Include="$(RootDir)\PackageManagement.sln" />
    </ItemGroup>

    <Target Name="BuildSln">
      <PropertyGroup>
        <EnableCodeAnalysis Condition="'$(EnableCodeAnalysis)' == ''" >true</EnableCodeAnalysis>
      </PropertyGroup>
      <MSBuild Projects="@(SolutionFile)" Targets="Build" Properties="EnableCodeAnalysis=$(EnableCodeAnalysis);PlatformTarget=AnyCPU" />
    </Target>

    <Target Name="Build" DependsOnTargets="RestorePackages;BuildSln;ReportFxCopResults;RunTests" />
</Project>
